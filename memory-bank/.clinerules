# Project Rules and Patterns

## Project Patterns

### Component Structure
- React components are class-based when they need internal state management
- Functional components are used for simpler presentational cases
- TypeScript interfaces are used for props and state definitions
- Complex components use sub-interfaces for specialized data (e.g., PlayerData)

### State Management
- CrashEngine handles all game state and calculations
- React components handle UI state and rendering
- Player state managed within CrashGraph component
- No global state management required

### File Organization
- Source files in src/ directory
- Memory bank files in memory-bank/ directory
- Public assets in public/ directory

### Code Style
- TypeScript strict mode enabled
- 2-space indentation (based on project files)
- Double quotes for strings
- Interface-first approach for type definitions
- Clear separation between logic and presentation

### Canvas Usage
- Canvas cleared before each frame
- Quadratic curves for smooth animations
- Purple curve color (#853278)
- Light background (#e2e2e2)

### Performance Rules
- Use requestAnimationFrame for animations
- Clear timeouts and animation frames on unmount
- Maintain single canvas context reference
- Optimize curve calculations

### Error Handling
- Check for infinite values in calculations
- Validate crash points
- Clean up resources on errors
- Maintain stable state transitions

## User Preferences
- Multiple graph instances preferred for comparison
- Visual feedback through smooth animations
- Clear numeric display of current multiplier
- Easy-to-read axis labels

## Critical Paths
1. Crash Point Calculation
   ```typescript
   setCrashPoint(crashPoint: number) {
     this.crashPoint = crashPoint;
     this.crashTime = Math.log(crashPoint) / CrashEngine.CrashSpeed;
   }
   ```

2. Multiplier Calculation
   ```typescript
   getElapsedPayout(elapsedTime: number) {
     const payout = Math.pow(Math.E, CrashEngine.CrashSpeed * elapsedTime);
     if (!isFinite(payout)) throw new Error("Infinite payout");
     return Math.max(payout, 1);
   }
   ```

3. Animation Loop
   ```typescript
   tick() {
     this.engine.tick();
     // Update canvas
     requestAnimationFrame(() => this.tick());
   }
   ```

## Project Constants
- CrashSpeed: 0.00018 (multiplier growth rate)
- PredictingLapse: 300ms
- Default graph dimensions: 400x400
- Plot padding: X=50, Y=40

## Integration Notes
- Components expect crash point as required prop
- Optional width/height props for customization
- Canvas styling through style prop
- Clean unmount required for resource cleanup
